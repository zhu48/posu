name: Regression Tests

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    strategy:
      matrix:
        build-type: [Debug, Release]
        cxx-toolchain: [g++-11, clang-12]
        include:
          - cxx-toolchain: g++-11
            cxx-compiler: g++-11
          - cxx-toolchain: clang-12
            cxx-compiler: clang++-12
            

    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    permissions:
      security-events: write

    steps:
    - uses: actions/checkout@v2

    - name: Install C++20 Toolchain
      run: sudo apt install ${{matrix.cxx-toolchain}}

    - name: Create Catch Source Directory
      run: cmake -E make_directory ${{runner.temp}}/catch

    - name: Cache Catch 2.13.3
      id: cache-catch
      uses: actions/cache@v2
      with:
        path: ${{runner.temp}}/catch
        key: toolchain-catch-2.13.3

    - name: Clone Catch 2.13.3
      if: ${{ ! steps.cache-catch.outputs.cache-hit }}
      working-directory: ${{runner.temp}}/catch
      run: git clone --branch v2.13.3 https://github.com/catchorg/Catch2.git --depth 1

    - name: Build Catch 2.13.3
      working-directory: ${{runner.temp}}/catch/Catch2
      run: |
        cmake ./ -B ${{runner.temp}}/build/catch -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_C_COMPILER=clang -DCATCH_BUILD_TESTING=OFF -DCATCH_INSTALL_DOCS=OFF -DCATCH_INSTALL_HELPERS=OFF
        sudo cmake --build ${{runner.temp}}/build/catch --target install -j 2

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v1
      with:
        languages: cpp

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{runner.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=${{matrix.build-type}} -DBUILD_TESTING=ON -DCMAKE_CXX_STANDARD=20 -DCMAKE_CXX_COMPILER=${{matrix.cxx-compiler}} -DPOSU_ENABLE_TESTING=ON -DPOSU_ENABLE_WALL=ON -DPOSU_ENABLE_WERROR=ON -DPOSU_ENABLE_DETAILED_CONCEPTS_DIAGNOSTICS=ON

    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config ${{matrix.build-type}} -j 2

    - name: Test
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{matrix.build-type}} -j 2

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v1
